---
import ThemeToggle from "./ThemeToggle.astro"
import LinkNav from "./LinkNav.astro"
import { getRelativeLocaleUrl } from 'astro:i18n'
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import LanguageToggle from '../components/LanguageToggle.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex flex-wrap px-3 text-xs md:text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
  >
    <LinkNav href={getRelativeLocaleUrl(lang ?? '', '')}>{t('nav.home')}</LinkNav>
    <LinkNav href={getRelativeLocaleUrl(lang ?? '', '/#experience')}>{t('nav.experience')}</LinkNav>
    <LinkNav href={getRelativeLocaleUrl(lang ?? '', '/#projects')}>{t('nav.projects')}</LinkNav>
    <LinkNav href={getRelativeLocaleUrl(lang ?? '', '/#about-me')}>{t('nav.about-me')}</LinkNav>
    <LinkNav href="mailto:joelnicolaslazarte@htomail.com" >{t('nav.contact')}</LinkNav>
    <ThemeToggle />
    <LanguageToggle/>
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500")
            } else {
              item.classList.remove("text-blue-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
    @apply dark:bg-gray-600/90 bg-blue-200/50;
  }

  @keyframes nav-shadown {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }
</style>